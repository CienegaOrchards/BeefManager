<!DOCTYPE html>
<html>
<head>
    <% include include/jquery-header.ejs %>
    <% include include/parse-header.ejs %>
    <% include include/semantic-header.ejs %>

    <title>Buy</title>

    <style>
        .ui-effects-transfer { border: 1px solid black; }
    </style>
</head>
<body>
    <div class="ui fixed large teal main menu"></div>

    <div class="ui basic segment" style="padding: 0; margin: 0;">
        <div id="maincontent" class="ui basic segment main content" style="margin-right: 36em;">
            <div class="ui right attached rail shoppingcart">
                <div class="ui tertiary teal segment" style="padding-left:0; padding-right: 0; min-width:26em;">
                    <div class="ui grid">
                        <div class="row" style="padding-bottom:0;padding-left:1rem;padding-right:1rem;">
                            <div class="left floated left aligned eleven wide column">
                                <h2 class="ui header" style="margin-top:0.3em;">
                                    <i class="shop icon"></i>
                                    Shopping Cart
                                </h2>
                            </div>
                            <div class="right floated center aligned five wide column">
                                <div class="ui tiny statistic">
                                    <div class="label">
                                        Total
                                    </div>
                                    <div class="value" style="font-size:1.5rem;">
                                        <i class="dollar icon" style="margin-right:0.25rem;"></i>0.00
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-bottom:0;padding-left:1rem;padding-right:1rem;">
                            <div class="center aligned sixteen wide column"><div class="ui disabled right labeled icon mini button checkoutbutton"><i class="right arrow icon"></i>Checkout</div></div>
                        </div>
                    </div>
                    <div class="ui basic segment"><div class="ui cards"><div class="hidden start of shopping cart" style="display:none"></div></div></div>
                </div>
            </div>
        </div>
    </div>

    <div class="ui small basic modal qrcode">
        <i class="close icon"></i>
        <div class="header">QR Code</div>
        <div class="ui two column centered grid">
            <div class="center aligned column">
                <div class="ui image qrcode center aligned"></div>
            </div>
        </div>
        <div class="actions">
            <div class="ui positive button">OK</div>
        </div>
    </div>

    <% include include/jquery-scripts.ejs %>
    <% include include/parse-scripts.ejs %>
    <% include include/semantic-scripts.ejs %>
    <% include include/qrcode-scripts.ejs %>
    <% include include/moment-scripts.ejs %>
    <% include include/message-modal.ejs %>

    <script type="text/javascript">

    function getClosestValue(arr, val)
    {
        var lo = -1, hi = arr.length;
        while (hi - lo > 1)
        {
            var mid = Math.round((lo + hi)/2);
            if ($(arr[mid]).attr('data-sortorder') <= val)
            {
                lo = mid;
            }
            else
            {
                hi = mid;
            }
        }
        if ($(arr[lo]).attr('data-sortorder') == val) hi = lo;
        return $(arr[lo]);
    }

    function makeLabelFromString(str)
    {
        return str.replace(/[^a-zA-Z]/g, '_');
    }

    function speciesIcon(species)
    {
        return '/images/' + makeLabelFromString(species).toLowerCase() + '.svg';
    }

    function makeSpecies(meat)
    {
        var cut = meat.get('cut');
        var speciesStr = cut.get('species')
        var speciesLabel = makeLabelFromString(speciesStr);

        var existing = $('.ui.segment.species_'+speciesLabel);
        if(!existing || existing.size() == 0)
        {
            existing = $('<div>').addClass('ui raised attached segment species_'+speciesLabel).append(
                $('<div>',{class: 'hidden start of species section',style:'display:none'})
            );

            // Find where to insert it
            var insertAfterThisLocation = getClosestValue($('.main.content .speciesholder'), speciesStr);;
            if(insertAfterThisLocation.length == 0)
            {
                insertAfterThisLocation = $('.main.content>.shoppingcart');
            }

            insertAfterThisLocation.after(
                $('<div>',{class: 'speciesholder'}).attr('data-sortorder',speciesStr).append(
                    $('<h1>').addClass('ui top attached block header').append(
                            $('<img>').addClass('ui middle aligned left floated tiny image').attr('src',speciesIcon(speciesStr)),
                            $('<div>').addClass('content').text(speciesStr)
                        ).css({'min-height':'3.4em'}),
                    existing
                ).hide().slideDown()
            );

            (new Parse.Query('Species'))
            .equalTo('species',speciesStr)
            .first(
            {
                success: function(species)
                {
                    existing.prev('h1').data('species',species);
                    existing.prev('h1').append(
                        $('<div>').addClass('sub header').text(species.get('description'))
                    );
                }
            });
        }

        return existing;
    }

    function makeCategory(meat)
    {
        var cut = meat.get('cut');
        var speciesStr = cut.get('species');
        var speciesLabel = makeLabelFromString(speciesStr);
        var categoryStr = cut.get('category');
        var categoryLabel = makeLabelFromString(categoryStr);

        var species = makeSpecies(meat);
        var existing = species.find('.ui.cards.category_'+speciesLabel+'__'+categoryLabel);
        if(!existing || existing.size() == 0)
        {
            existing = $('<div>').addClass('ui cards category_'+speciesLabel+'__'+categoryLabel).append(
                $('<div>',{class:'hidden start of category section', style:'display:none'})
            );

            // Find where to insert it
            var insertAfterThisLocation = getClosestValue(species.find('.categoryholder'), categoryStr);
            if(insertAfterThisLocation.length == 0)
            {
                insertAfterThisLocation = species.find('.hidden.start.of.species.section');
            }

            insertAfterThisLocation.after(
                $('<div>',{class:'categoryholder'}).attr('data-sortorder',categoryStr).append(
                    $('<div>').addClass('ui huge teal ribbon label').append(
                        $('<h3>').addClass('ui header').text(categoryStr).prepend(
                            $('<i>').addClass('inverted middle aligned angle right icon').css('padding-top','0.2rem')
                        )
                    ),
                    existing
                ).hide().slideDown()
            );

            (new Parse.Query('Category'))
            .equalTo('species',speciesStr)
            .equalTo('category',categoryStr)
            .first(
            {
                success: function(category)
                {
                    existing.data('category',category);
                    existing.before(
                        $('<div>').addClass('ui basic segment').css('margin-top','1rem').append(
                            $('<i>').addClass('left floated circular info icon').css('float','left'),
                            $('<p>').css({'margin-left':'3em'}).text(category.get('description'))
                        )
                    );
                }
            });
        }

        return existing;
    }

    function collapseMeatCard(card, timing)
    {
        card.find('.location').finish().fadeOut(timing);
        card.find('.extra.content').finish().fadeOut(timing);
        card.finish().animate({height:card.data('origHeight')},timing);
    }

    function expandMeatCard(card, timing)
    {
        if(!card.data('origHeight')) { card.data('origHeight',card.height()); }
        card.find('.location').finish().fadeIn(timing);
        card.find('.extra.content').finish().fadeIn(timing);
        if(!card.data('finalHeight')) { card.data('finalHeight',card.height()); }
        card.height(card.data('origHeight'));
        card.finish().animate({height:card.data('finalHeight')},timing);

        var docViewBottom = $(window).scrollTop() + $(window).height();
        var elemTop = card.offset().top;

        if(docViewBottom - elemTop < card.data('finalHeight'))
        {
            $(window).finish().scrollTo('+='+(card.data('finalHeight')-card.data('origHeight'))+'px',$.fx.speeds._default);
        }
    }

    function makeMeat(meat)
    {
        var cut = meat.get('cut');
        var animal = meat.get('animal');
        var freezer = meat.get('freezer');

        var quantity = meat.get('units');
        var quantityStr = quantity.toFixed(2);

        var speciesStr = cut.get('species');
        var cutStr = cut.get('cut') === undefined ? '' : cut.get('cut');
        var categoryStr = cut.get('category');
        var unitStr = cut.get('units');
        var pricePerUnit = cut.get('price');
        var pricePerUnitStr = pricePerUnit.toFixed(2);

        var slaughterDate = animal === undefined ? null : animal.get('slaughtered');

        var locationStr = freezer === undefined || freezer === null ? meat.get('location') : freezer.get('location');
        var freezerStr = freezer === undefined || freezer === null ? 'N/A' : freezer.get('identifier');

        var meatPriceStr = (Math.floor(meat.get('units') * cut.get('price') * 100)/100.0).toFixed(2)
        var meatDescStr = quantityStr + unitStr + " " + speciesStr + " " + cutStr;

        var newMeat = $('<div>').addClass('ui meat card').attr('data-sortorder', (speciesStr+' '+cutStr))
        .append(
            $('<div>').addClass('content')
            .append(
                $('<i>').addClass('right floated big qrcode icon').attr({ident: meat.id, desc: meatDescStr}),
                $('<div>').addClass('right floated').append($('<div>').addClass('ui green tag label').append('$ '+meatPriceStr)),
                $('<div>').addClass('header').append($('<div>').addClass('ui teal small header').text(cutStr)),
                $('<div>').addClass('meta').text(quantityStr + ' ' + unitStr + ' @ $' + pricePerUnitStr + '/' + unitStr),
                $('<div>').addClass('left floated location').append($('<i>').addClass('home icon')).appendText(locationStr).hide(),
                $('<div>').addClass('right floated location').append($('<i>').addClass('power icon')).appendText(freezerStr).hide()
            ),
            $('<div>').addClass('extra content').hide()
            .append(
                $('<div>').addClass('left floated').append($('<i>').addClass('calendar icon')).appendText('Butchered: ' + (slaughterDate ? moment(slaughterDate).fromNow() : 'unknown')),
                $('<div>',{class:'ui right floated teal mini button buybutton'}).append($('<i>',{class:'small mail forward icon'}), 'BUY')
            )
        );
        newMeat.data({ meat: meat });
        newMeat.hover(
        function() // in
        {
            expandMeatCard($(this), $.fx.speeds._default);
        },
        function() // out
        {
            collapseMeatCard($(this), $.fx.speeds._default)
        });

        newMeat.find('.buybutton').click(
        function()
        {
            var meat = $(this).closest('.card');

            // Make a clone and insert it where the original is/was, then collapse original
            var meatClone = meat.clone();
            meat.before(meatClone);
            collapseMeatCard(meat, 0);

            // Track old category and species to collapse/remove as necessary on completion
            var oldCategory = null;
            var oldSpecies = null;
            var newButtonContent;
            var newLocation;
            var parseMeat = meat.data('meat');
            var speciesStr = parseMeat.get('cut').get('species')

            if(!meat.closest('.shoppingcart').length)
            {
                // Adding to cart
                oldCategory = meat.closest('.categoryholder');
                oldSpecies = meat.closest('.speciesholder');

                // Swap icon to show species
                meat.find('i.qrcode').hide().before($('<img>',{src:speciesIcon(speciesStr), class:'ui left floated mini image speciesicon'}));

                var cart = $('.shoppingcart .cards');
                newLocation = getClosestValue(cart.find('.meat.card'), meat.attr('data-sortorder'));
                if(newLocation.length == 0)
                {
                    newLocation = cart.find('.hidden.start.of.shopping.cart');
                }

                newButtonContent = [$('<i>',{class:'small reply icon'}),'REMOVE'];
            }
            else
            {
                // Removing from cart
                var category = makeCategory(meat.data('meat'));
                // Find where to insert it
                newLocation = getClosestValue(category.find('.meat.card'), meat.attr('data-sortorder'));
                if(newLocation.length == 0)
                {
                    newLocation = category.find('.hidden.start.of.category.section');
                }

                newButtonContent = [$('<i>',{class:'small mail forward icon'}),'BUY'];

                meat.find('img.speciesicon').remove();
                meat.find('i.qrcode').show();
            }

            // Change the button
            $(this).empty();
            $(this).append(newButtonContent);

            // Animate transfer from orig position to new position
            meat.insertAfter(newLocation).hide().slideDown();
            meatClone.effect('transfer', { to: meat }).slideUp(
            function()
            {
                meatClone.remove();

                // Check if category/species might now be empty
                if(oldCategory)
                {
                    if(!oldCategory.find('.card').length)
                    {
                        oldCategory.slideUp(function(){oldCategory.remove()});
                    }
                    if(!oldSpecies.find('.card').length)
                    {
                        oldSpecies.slideUp(function(){oldSpecies.remove()});
                    }
                }
            }).dequeue();

            // Animate price change -- cloned meat has no .data('meat') so won't count, so we should be good
            $('.shoppingcart .statistic').finish().slideUp(
                function()
                {
                    var totalAmount = 0;
                    $('.shoppingcart .card.meat').each(
                        function()
                        {
                            var parseMeat = $(this).data('meat');
                            if(parseMeat)
                            {
                                var meatPrice = Math.floor(parseMeat.get('units') * parseMeat.get('cut').get('price') * 100);
                                totalAmount += meatPrice;
                            }
                        }
                    );

                    $(this).find('.value').data('total',totalAmount).contents().last().replaceWith((totalAmount/100.0).toFixed(2));
                    if(totalAmount > 0)
                    {
                        $('.checkoutbutton').removeClass('disabled').addClass('positive');
                    }
                    else
                    {
                        $('.checkoutbutton').addClass('disabled').removeClass('positive');
                    }
                }).slideDown();
        });

        var category = makeCategory(meat);
        // Find where to insert it
        var insertAfterThisLocation = getClosestValue(category.find('.meat.card'), newMeat.attr('data-sortorder'));
        if(insertAfterThisLocation.length == 0)
        {
            insertAfterThisLocation = category.find('.hidden.start.of.category.section');
        }

        return newMeat.insertAfter(insertAfterThisLocation);
    }

    $(function()
    {
        var fonts = $.Deferred();
        WebFontConfig = {
            google: { families: [ 'Amatic+SC:700:latin' ] },
            active: function() { fonts.resolve(); }
        };

        var wf = document.createElement('script');
        wf.src = '//ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
        wf.type = 'text/javascript';
        wf.async = 'true';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(wf, s);

        var meatQuery = new Parse.Query('Meat')
            .exists('freezer')          // If "eaten" we clear freezer
            .equalTo('lock', 0)         // Object locked by someone checking out
            .doesNotExist('orderItem')  // Object part of an order
            .include('cut')
            .include('freezer')
            .include('animal')
            .each(
            function(meat)
            {
                makeMeat(meat);
                return Parse.Promise.as('ok');
            })
            .then(
            function()
            {
                fonts.done(function()
                            {
                                $("i.qrcode").click(function(e)
                                {
                                    var ident = $(this).attr('ident');
                                    var desc = $(this).attr('desc');

                                    $('.modal.qrcode .image.qrcode').empty();

                                    $('.modal.qrcode .image.qrcode').qrcode({
                                        size: 600, // 600 DPI

                                        ecLevel: 'H',

                                        fill: '#000',
                                        background: '#fff',
                                        text: '{"desc":"'+$(this).attr('desc')+'","id":"'+$(this).attr('ident')+'"}',

                                        minVersion: 13,
                                        maxVersion: 13,
                                        quiet: 4,
                                        mode: 2,
                                        mSize: 0.12,
                                        mPosY: 0.78,
                                        fontname: 'Amatic SC',
                                        fontcolor: '#c00',

                                        label: $(this).attr('desc')
                                    });

                                    $('.modal.qrcode>.header').text(desc);

                                    $('.modal.qrcode').modal('show');
                                });
                            });

            },
            function(err)
            {
                $('.main.content').text('There was an error fetching data');
            });
    });
    </script>
</body>
</html>
