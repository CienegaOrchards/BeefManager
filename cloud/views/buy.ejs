<!DOCTYPE html>
<html>
<head>
    <% include include/jquery-header.ejs %>
    <% include include/parse-header.ejs %>
    <% include include/semantic-header.ejs %>

    <title>Buy</title>

    <style>
        .ui-effects-transfer { border: 1px solid black; }
    </style>
</head>
<body>
    <div class="ui fixed large teal main menu"></div>

    <div class="ui basic segment" style="padding: 0; margin: 0;">
        <div id="maincontent" class="ui basic segment main content" style="margin-right: 36em;">
            <div class="ui right attached rail shoppingcart">
                <div class="ui tertiary teal segment" style="padding-left:0; padding-right: 0; min-width:26em;">
                    <div class="ui grid" style="padding-bottom:0;padding-left:1rem;padding-right:1rem;">
                        <div class="left floated left aligned eleven wide column">
                            <h2 class="ui header shoppingcartheader" style="margin-top:0.3em;"><i class="shop icon"></i>Shopping Cart</h2>
                            <div class="ui loading right labeled huge positive icon button checkoutbutton"><i class="right arrow icon"></i>Checkout</div>
                        </div>

                        <div class="right floated center aligned five wide column">
                            <div class="ui tiny statistic">
                                <div class="label">
                                    Total
                                </div>
                                <div class="value" style="font-size:1.5rem;">
                                    <i class="dollar icon" style="margin-right:0.25rem;"></i>0.00
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ui basic segment"><div class="ui cards"><div class="hidden start of shopping cart" style="display:none"></div></div></div>
                </div>
            </div>
        </div>
    </div>

    <div class="ui modal checkout">
        <div class="header"><i class="circular shop icon"></i><span id="ordernumber">Cienega Orchards Checkout</span></div>
        <form class="ui form stripecheckout">
            <div class="ui error message"></div>
            <div class="content">
                <div class="description">
                    <div class="ui attached segment">
                        <h4 class="ui dividing header">Customer info</h4>
                        <div class="field">
                            <div class="two fields">
                                <div class="required field">
                                    <label>Name</label>
                                    <div class="ui icon input">
                                        <i class="user icon"></i>
                                        <input id="name" type="text" data-stripe="name" />
                                    </div>
                                </div>
                                <div class="required field">
                                    <label>Email</label>
                                    <div class="ui icon input">
                                        <i class="mail icon"></i>
                                        <input id="customeremail" type="text"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h4 class="ui dividing header">Payment details</h4>
                        <div class="field">
                            <div class="three fields">
                                <div class="required eight wide field">
                                    <label>Card number</label>
                                    <input id="number" placeholder="XXXX XXXX XXXX XXXX" type="text" size="20" data-stripe="number"/>
                                </div>
                                <div class="required two wide field">
                                    <label>CVC</label>
                                    <input id="cvc" placeholder="XXX" type="text" size="4" data-stripe="cvc"/>
                                </div>
                                <div class="six wide field">
                                    <label>Expiration Date</label>
                                    <div class="two fields">
                                        <div class="required seven wide field">
                                            <div class="ui icon input">
                                                <i class="calendar icon"></i>
                                                <input id="exp_month" placeholder="MM" type="text" size="2" data-stripe="exp_month"/>
                                            </div>
                                        </div>
                                        <div class="required nine wide field">
                                            <div class="ui icon input">
                                                <i class="calendar icon"></i>
                                                <input id="exp_year" placeholder="YYYY" type="text" size="4" data-stripe="exp_year"/>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ui attached segment">
                        <h3 class="ui header">
                            Click "Pay" below to order<div class="ui green label itemcount"></div> and charge your card<div class="ui green label amount"></div>
                        </h3>
                        <p>Once the order is placed, you should receive a receipt by email, and we will contact you to arrange pickup of your order once all the items are relocated to Atherton.</p>
                    </div>
                </div>
            </div>
            <div class="actions">
                <div class="ui buttons">
                    <div class="ui negative circular button">
                        Cancel
                    </div>
                    <div class="or"></div>
                    <div class="ui positive circular button">
                        Pay
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="ui small basic modal qrcode">
        <i class="close icon"></i>
        <div class="header">QR Code</div>
        <div class="ui two column centered grid">
            <div class="center aligned column">
                <div class="ui image qrcode center aligned"></div>
            </div>
        </div>
        <div class="actions">
            <div class="ui positive button">OK</div>
        </div>
    </div>


    <% include include/jquery-scripts.ejs %>
    <% include include/parse-scripts.ejs %>
    <% include include/semantic-scripts.ejs %>
    <% include include/qrcode-scripts.ejs %>
    <% include include/moment-scripts.ejs %>
    <% include include/message-modal.ejs %>
    <script type="text/javascript" src="https://js.stripe.com/v2/"></script>

    <script type="text/javascript">

    function cartContents()
    {
        return $.makeArray($('.shoppingcart .card.meat').map(function(){ return $(this).data('meat').id; }));
    }

    function cartValueCents()
    {
        var totalAmount = 0;
        $('.shoppingcart .card.meat').each(
            function()
            {
                var parseMeat = $(this).data('meat');
                if(parseMeat)
                {
                    var meatPrice = Math.floor(parseMeat.get('units') * parseMeat.get('cut').get('price') * 100);
                    totalAmount += meatPrice;
                }
            }
        );

        return totalAmount;
    }

    Parse.Config.get()
    .then(function(config)
    {
        var productionMode = config.get('PRODUCTION_MODE');
        if(!productionMode) return Parse.Promise.error('No production mode config key found');

        var stripeKey = config.get(productionMode+'stripeKey');
        if(!stripeKey) return Parse.Promise.error('Could not get stripe key');

        return Parse.Promise.as(stripeKey);
    })
    .then(function(stripeKey)
    {
        Stripe.setPublishableKey(stripeKey);

        $('.checkoutbutton').removeClass('loading').click(function(ev)
        {
            $(this).addClass('disabled loading'); // Prevent double clicks
            ev.preventDefault();

            // Try and reserve cart contents
            Parse.Cloud.run('reserveItems',{
                itemList: cartContents()
            })
            .then(function()
            {
                // Everything reserved OK, so create the order
                return Parse.Cloud.run('createOrder',
                {
                    itemList: cartContents()
                });
            })
            .then(function(response)
            {
                var orderID = response.orderID;
                var totalAmount = response.amountCents;
                var numMeats = response.itemCount;

                $('.modal.checkout #ordernumber').empty().text('Cienega Orchards Order # '+orderID);
                $('.form.stripecheckout').data('orderID', orderID); // Save for charging
                $('.modal.checkout .label.itemcount').empty().appendText(numMeats+' item'+(numMeats>1?'s':''));
                $('.modal.checkout .label.amount').empty().append(
                    $('<i>',{class:'dollar icon'})
                ).appendText((totalAmount/100.00).toFixed(2));
                $('.modal.checkout').modal('show');
            })
            .fail(function(error)
            {
                console.log(error);
                // Failed to reserve error.failedMeat so remove it from cart & inventory and display error
                displayError('Item '+error.message+' got janked from under you!');
            });

            $(this).removeClass('disabled loading'); // Re-enable button
        });

        return Parse.Promise.as('ok');
    })
    .fail(function(err)
    {
        displayError(err);
    });

    function stripeCheckout(status, response)
    {
        console.log("Stripe callback");
        console.log(status);
        console.log(response);

        var form = $('.form.stripecheckout');

        if(response.error)
        {
            form.form('add prompt', response.error.param, response.error.message);
            form.find('#'+response.error.param).focus();

            // Re-enable buttons that were disabled on submit
            form.find('.button').removeClass('disabled loading');
        }
        else
        {
            var stripeToken = response.id;

            Parse.Cloud.run('chargeCard',
                            {
                                orderID: form.data('orderID'),
                                stripeToken: stripeToken,
                            })
            .then(function(result)
            {
                console.log('Checkout OK');
                console.log(result);
                // Should create order, clear cart, dismiss modal
                form.trigger('reset');
                $('.modal.checkout').modal('hide');
                return Parse.Promise.as('ok');
            })
            .fail(function(err)
            {
                console.log('Checkout error');
                console.log(err);
                form.find('.error.message').text('Checkout failed: '+err.message).finish().slideDown();

                return Parse.Promise.as('handled');
            })
            .always(function()
            {
                // Turn buttons back on
                form.find('.button').removeClass('disabled loading');
            })
        }
    }

    function getClosestValue(arr, val)
    {
        var lo = -1, hi = arr.length;
        while (hi - lo > 1)
        {
            var mid = Math.round((lo + hi)/2);
            if ($(arr[mid]).attr('data-sortorder') <= val)
            {
                lo = mid;
            }
            else
            {
                hi = mid;
            }
        }
        if ($(arr[lo]).attr('data-sortorder') == val) hi = lo;
        return $(arr[lo]);
    }

    function makeLabelFromString(str)
    {
        return str.replace(/[^a-zA-Z]/g, '_');
    }

    function speciesIcon(species)
    {
        return '/images/' + makeLabelFromString(species).toLowerCase() + '.svg';
    }

    function makeSpecies(meat)
    {
        var cut = meat.get('cut');
        var speciesStr = cut.get('species')
        var speciesLabel = makeLabelFromString(speciesStr);

        var existing = $('.ui.segment.species_'+speciesLabel);
        if(!existing || existing.size() == 0)
        {
            existing = $('<div>').addClass('ui raised attached segment species_'+speciesLabel).append(
                $('<div>',{class: 'hidden start of species section',style:'display:none'})
            );

            // Find where to insert it
            var insertAfterThisLocation = getClosestValue($('.main.content .speciesholder'), speciesStr);
            if(insertAfterThisLocation.length == 0)
            {
                insertAfterThisLocation = $('.main.content>.shoppingcart');
            }

            insertAfterThisLocation.after(
                $('<div>',{class: 'speciesholder'}).attr('data-sortorder',speciesStr).append(
                    $('<h1>').addClass('ui top attached block header').append(
                            $('<img>').addClass('ui middle aligned left floated tiny image').attr('src',speciesIcon(speciesStr)),
                            $('<div>').addClass('content').text(speciesStr)
                        ).css({'min-height':'3.4em'}),
                    existing
                ).hide().slideDown()
            );

            (new Parse.Query('Species'))
            .equalTo('species',speciesStr)
            .first(
            {
                success: function(species)
                {
                    existing.prev('h1').data('species',species);
                    existing.prev('h1').append(
                        $('<div>').addClass('sub header').text(species.get('description'))
                    );
                }
            });
        }

        return existing;
    }

    function makeCategory(meat)
    {
        var cut = meat.get('cut');
        var speciesStr = cut.get('species');
        var speciesLabel = makeLabelFromString(speciesStr);
        var categoryStr = cut.get('category');
        var categoryLabel = makeLabelFromString(categoryStr);

        var species = makeSpecies(meat);
        var existing = species.find('.ui.cards.category_'+speciesLabel+'__'+categoryLabel);
        if(!existing || existing.size() == 0)
        {
            existing = $('<div>').addClass('ui cards category_'+speciesLabel+'__'+categoryLabel).append(
                $('<div>',{class:'hidden start of category section', style:'display:none'})
            );

            // Find where to insert it
            var insertAfterThisLocation = getClosestValue(species.find('.categoryholder'), categoryStr);
            if(insertAfterThisLocation.length == 0)
            {
                insertAfterThisLocation = species.find('.hidden.start.of.species.section');
            }

            insertAfterThisLocation.after(
                $('<div>',{class:'categoryholder'}).attr('data-sortorder',categoryStr).append(
                    $('<div>').addClass('ui huge teal ribbon label').append(
                        $('<h3>').addClass('ui header').text(categoryStr).prepend(
                            $('<i>').addClass('inverted middle aligned angle right icon').css('padding-top','0.2rem')
                        )
                    ),
                    existing
                ).hide().slideDown()
            );

            (new Parse.Query('Category'))
            .equalTo('species',speciesStr)
            .equalTo('category',categoryStr)
            .first(
            {
                success: function(category)
                {
                    existing.data('category',category);
                    existing.before(
                        $('<div>').addClass('ui basic segment').css('margin-top','1rem').append(
                            $('<i>').addClass('left floated circular info icon').css('float','left'),
                            $('<p>').css({'margin-left':'3em'}).text(category.get('description'))
                        )
                    );
                }
            });
        }

        return existing;
    }

    function collapseMeatCard(card, timing)
    {
        card.find('.location').finish().fadeOut(timing);
        card.find('.extra.content').finish().fadeOut(timing);
        card.finish().animate({height:card.data('origHeight')},timing);
    }

    function expandMeatCard(card, timing)
    {
        if(!card.data('origHeight')) { card.data('origHeight',card.height()); }
        card.find('.location').finish().fadeIn(timing);
        card.find('.extra.content').finish().fadeIn(timing);
        if(!card.data('finalHeight')) { card.data('finalHeight',card.height()); }
        card.height(card.data('origHeight'));
        card.finish().animate({height:card.data('finalHeight')},timing);

        var docViewBottom = $(window).scrollTop() + $(window).height();
        var elemTop = card.offset().top;

        if(docViewBottom - elemTop < card.data('finalHeight'))
        {
            $(window).finish().scrollTo('+='+(card.data('finalHeight')-card.data('origHeight'))+'px',$.fx.speeds._default);
        }
    }

    function makeMeat(meat)
    {
        var cut = meat.get('cut');
        var animal = meat.get('animal');
        var freezer = meat.get('freezer');

        var quantity = meat.get('units');
        var quantityStr = quantity.toFixed(2);

        var speciesStr = cut.get('species');
        var cutStr = cut.get('cut') === undefined ? '' : cut.get('cut');
        var categoryStr = cut.get('category');
        var unitStr = cut.get('units');
        var pricePerUnit = cut.get('price');
        var pricePerUnitStr = pricePerUnit.toFixed(2);

        var slaughterDate = animal === undefined ? null : animal.get('slaughtered');

        var locationStr = freezer === undefined || freezer === null ? meat.get('location') : freezer.get('location');
        var freezerStr = freezer === undefined || freezer === null ? 'N/A' : freezer.get('identifier');

        var meatPriceStr = (Math.floor(meat.get('units') * cut.get('price') * 100)/100.0).toFixed(2)
        var meatDescStr = quantityStr + unitStr + " " + speciesStr + " " + cutStr;

        var newMeat = $('<div>').addClass('ui meat card').attr('data-sortorder', (speciesStr+' '+cutStr))
        .append(
            $('<div>').addClass('content')
            .append(
                $('<i>').addClass('right floated big qrcode icon').attr({ident: meat.id, desc: meatDescStr}),
                $('<div>').addClass('right floated').append($('<div>').addClass('ui green tag label').append('$ '+meatPriceStr)),
                $('<div>').addClass('header').append($('<div>').addClass('ui teal small header').text(cutStr)),
                $('<div>').addClass('meta').text(quantityStr + ' ' + unitStr + ' @ $' + pricePerUnitStr + '/' + unitStr),
                $('<div>').addClass('left floated location').append($('<i>').addClass('home icon')).appendText(locationStr).hide(),
                $('<div>').addClass('right floated location').append($('<i>').addClass('power icon')).appendText(freezerStr).hide()
            ),
            $('<div>').addClass('extra content').hide()
            .append(
                $('<div>').addClass('left floated').append($('<i>').addClass('calendar icon')).appendText('Butchered: ' + (slaughterDate ? moment(slaughterDate).fromNow() : 'unknown')),
                $('<div>',{class:'ui right floated teal mini button buybutton'}).append($('<i>',{class:'small mail forward icon'}), 'BUY')
            )
        );
        if(freezerStr == 'Newly Added')
        {
            newMeat.css('background-color','rgb(210, 255, 255)');
            newMeat.addClass('notlocal');
        }
        newMeat.data({ meat: meat });
        newMeat.hover(
        function() // in
        {
            expandMeatCard($(this), $.fx.speeds._default);
        },
        function() // out
        {
            collapseMeatCard($(this), $.fx.speeds._default)
        });

        newMeat.find('.buybutton').click(
        function()
        {
            var meat = $(this).closest('.card');

            // Make a clone and insert it where the original is/was, then collapse original
            var meatClone = meat.clone();
            meat.before(meatClone);
            collapseMeatCard(meat, 0);

            // Track old category and species to collapse/remove as necessary on completion
            var oldCategory = null;
            var oldSpecies = null;
            var newButtonContent;
            var newLocation;
            var parseMeat = meat.data('meat');
            var speciesStr = parseMeat.get('cut').get('species')
            var adding = false;

            if(!meat.closest('.shoppingcart').length)
            {
                // Adding to cart
                adding = true;
                oldCategory = meat.closest('.categoryholder');
                oldSpecies = meat.closest('.speciesholder');

                // Swap icon to show species
                meat.find('i.qrcode').hide().before($('<img>',{src:speciesIcon(speciesStr), class:'ui left floated mini image speciesicon'}));

                var cart = $('.shoppingcart .cards');
                newLocation = getClosestValue(cart.find('.meat.card'), meat.attr('data-sortorder'));
                if(newLocation.length == 0)
                {
                    newLocation = cart.find('.hidden.start.of.shopping.cart');
                }

                newButtonContent = [$('<i>',{class:'small reply icon'}),'REMOVE'];
            }
            else
            {
                // Removing from cart
                var category = makeCategory(meat.data('meat'));
                // Find where to insert it
                newLocation = getClosestValue(category.find('.meat.card'), meat.attr('data-sortorder'));
                if(newLocation.length == 0)
                {
                    newLocation = category.find('.hidden.start.of.category.section');
                }

                newButtonContent = [$('<i>',{class:'small mail forward icon'}),'BUY'];

                meat.find('img.speciesicon').remove();
                meat.find('i.qrcode').show();
            }

            // Change the button
            $(this).empty();
            $(this).append(newButtonContent);

            // Stick the real meat in the target position and animate it in
            meat.insertAfter(newLocation).hide().slideDown();

            // Change shopping cart header/button
            // Need checkout button if adding to cart or if cart has more than just the clone left
            if(adding || $('.shoppingcart .meat.card').length > 1)
            {
                $('.shoppingcartheader').finish().slideUp();
                $('.checkoutbutton').finish().slideDown();
                $('.shoppingcart>.tertiary.segment>.basic.segment').slideDown();
            }
            else
            {
                $('.shoppingcart>.tertiary.segment>.basic.segment').slideUp();
                $('.checkoutbutton').finish().slideUp();
                $('.shoppingcartheader').finish().slideDown();
            }

            // Animate transfer from orig position to new position
            meatClone.effect('transfer', { to: meat }).slideUp(
            function()
            {
                meatClone.remove();

                // Check if category/species might now be empty
                if(oldCategory)
                {
                    if(!oldCategory.find('.card').length)
                    {
                        oldCategory.slideUp(function(){oldCategory.remove()});
                    }
                    if(!oldSpecies.find('.card').length)
                    {
                        oldSpecies.slideUp(function(){oldSpecies.remove()});
                    }
                }
            }).dequeue();

            // Animate price change -- cloned meat has no .data('meat') so won't count, so we should be good
            $('.shoppingcart .statistic').finish().slideUp(
                function()
                {
                    var totalAmount = cartValueCents();

                    $(this).find('.value').data('total',totalAmount).contents().last().replaceWith((totalAmount/100.0).toFixed(2));
                }).slideDown();
        });

        var category = makeCategory(meat);
        // Find where to insert it
        var insertAfterThisLocation = getClosestValue(category.find('.meat.card'), newMeat.attr('data-sortorder'));
        if(insertAfterThisLocation.length == 0)
        {
            insertAfterThisLocation = category.find('.hidden.start.of.category.section');
        }

        return newMeat.insertAfter(insertAfterThisLocation);
    }

    $(function()
    {
        $('.checkoutbutton').hide();
        $('.shoppingcart>.tertiary.segment>.basic.segment').hide();

        var fonts = $.Deferred();
        WebFontConfig = {
            google: { families: [ 'Amatic+SC:700:latin' ] },
            active: function() { fonts.resolve(); }
        };

        var wf = document.createElement('script');
        wf.src = '//ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
        wf.type = 'text/javascript';
        wf.async = 'true';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(wf, s);

        $('.form.stripecheckout').form({
            name: {
                identifier: 'name',
                rules: [ { type: 'empty', prompt: 'Please enter your name' } ]
            },
            customeremail: {
                identifier: 'customeremail',
                rules: [ { type: 'empty', prompt: 'Please enter your email address' },
                         { type: 'email', prompt: 'Please enter a valid email address' } ]
            },
            number: {
                identifier: 'number',
                rules: [ { type: 'empty', prompt: 'Please specify credit card number' },
                         { type: 'cardnumbervalid', prompt: 'Invalid card number' } ]
            },
            cvc: {
                identifier: 'cvc',
                rules: [ { type: 'empty', prompt: 'Please specify CVC security code from back of card' },
                         { type: 'cvcvalid', prompt: 'Invalid CVC number' },
                       ]
            },
            exp_month: {
                identifier: 'exp_month',
                rules: [ { type: 'empty', prompt: 'Please enter expiration month (MM)' },
                         { type: 'integer', prompt: 'Must be an integer' },
                         { type: 'maxLength[2]', prompt: 'Max 2 digits'} ]
            },
            exp_year: {
                identifier: 'exp_year',
                rules: [ { type: 'empty', prompt: 'Please enter expiration year (YYYY)' },
                         { type: 'integer', prompt: 'Must be an integer' },
                         { type: 'length[2]', prompt: 'At least 2 digits'},
                         { type: 'maxLength[4]', prompt: 'Max 4 digits'} ]
            }
        }, {
            inline: true,
            rules: {
                cardnumbervalid: function ()
                {
                    return Stripe.card.validateCardNumber($(this).val());
                },
                cvcvalid: function()
                {
                    return Stripe.card.validateCVC($(this).val());
                }
            }
        })
        .submit(function(evt)
        {
            var form = $(this);
            form.find('.error.message').finish().slideUp();

            form.form('validate form');

            event.preventDefault();
            if(form.hasClass('success'))
            {
                // Validation OK so talk to Stripe to checkout

                // Disable the form buttons to prevent repeated clicks
                form.find('.button').addClass('disabled loading');

                Stripe.card.createToken(form, stripeCheckout);
            }
            else
            {
                // Validation booboo, so do nothing and let the user fix things
                console.log("Do not proceed")
            }
            // In any case, do not POST
            return false;
        });

        $('.modal.checkout').modal({
            closable: false,
            onDeny: function()
            {
                $('form').trigger('reset');
            },
            onApprove: function()
            {
                // Do not close this thing here; only from form submit
                $('form').trigger('submit');
                return false;
            }
        });

        var meatQuery = new Parse.Query('Meat')
            .exists('freezer')          // If "eaten" we clear freezer
            .notEqualTo('freezer',null) // Sometimes "exists" excludes null, sometimes it doesn't, it seems...
            .equalTo('lock', 0)         // Object locked by someone checking out or ordered
            .include('cut')
            .include('freezer')
            .include('animal')
            .each(
            function(meat)
            {
                makeMeat(meat);
                return Parse.Promise.as('ok');
            })
            .then(
            function()
            {
                fonts.done(function()
                            {
                                $("i.qrcode").click(function(e)
                                {
                                    var ident = $(this).attr('ident');
                                    var desc = $(this).attr('desc');

                                    $('.modal.qrcode .image.qrcode').empty();

                                    $('.modal.qrcode .image.qrcode').qrcode({
                                        size: 600, // 600 DPI

                                        ecLevel: 'H',

                                        fill: '#000',
                                        background: '#fff',
                                        text: '{"desc":"'+$(this).attr('desc')+'","id":"'+$(this).attr('ident')+'"}',

                                        minVersion: 13,
                                        maxVersion: 13,
                                        quiet: 4,
                                        mode: 2,
                                        mSize: 0.12,
                                        mPosY: 0.78,
                                        fontname: 'Amatic SC',
                                        fontcolor: '#c00',

                                        label: $(this).attr('desc')
                                    });

                                    $('.modal.qrcode>.header').text(desc);

                                    $('.modal.qrcode').modal('show');
                                });
                            });

            },
            function(err)
            {
                $('.main.content').text('There was an error fetching data');
            });
    });
    </script>
</body>
</html>
