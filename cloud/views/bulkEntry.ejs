<!DOCTYPE html>
<html>
<head>
    <% include include/jquery-header.ejs %>
    <% include include/parse-header.ejs %>
    <% include include/semantic-header.ejs %>

    <title>Bulk Entry</title>

</head>
<body>
    <div class="ui fixed large teal main menu"></div>

    <div class="main content">
        <div class="ui grid">
            <div class="row">
                <div class="eight wide column">
                    <div class="ui raised segment">
                        <a class="ui top attached massive label">Enter new meat</a>
                        <div class="content">
                            <div class="ui form newmeatform">
                                <div class="fields">
                                    <div class="four wide required field">
                                        <label>Species</label>
                                        <div class="ui fluid search selection dropdown speciesname">
                                            <input id="speciesname" type="hidden" />
                                            <i class="dropdown icon"></i>
                                            <div class="default text">Enter Species...</div>
                                            <div class="menu"></div>
                                        </div>
                                    </div>
                                    <div class="seven wide required field">
                                        <label>Cut</label>
                                        <div class="ui fluid search selection dropdown cutname">
                                            <input id="cutname" type="hidden" />
                                            <i class="dropdown icon"></i>
                                            <div class="default text">Enter Cut...</div>
                                            <div class="menu"></div>
                                        </div>
                                    </div>
                                    <div class="five wide required field">
                                        <label>Category</label>
                                        <div class="ui fluid search selection dropdown categoryname">
                                            <input id="categoryname" type="hidden" />
                                            <i class="dropdown icon"></i>
                                            <div class="default text">Enter Category...</div>
                                            <div class="menu"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="fields">
                                    <div class="four wide required field">
                                        <label>Units/Weight</label>
                                        <input id="units" type="text" placeholder="Units" />
                                    </div>
                                    <div class="five wide field">
                                        <label>Animal</label>
                                        <div class="ui fluid search selection dropdown animalID">
                                            <input id="animalID" type="hidden"></input>
                                            <i class="dropdown icon"></i>
                                            <div class="default text">Animal ID</div>
                                            <div class="menu"></div>
                                        </div>
                                    </div>
                                    <div class="three wide field">
                                        <label>Qty</label>
                                        <input id="qty" type="text" placeholder="1" />
                                    </div>
                                </div>
                                <div class="ui right floated teal submit addmeatbutton button">Add</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="eight wide column">
                    <div class="ui raised segment">
                        <a class="ui top attached massive label">Enter new animal</a>
                        <div class="content">
                            <div class="ui form newanimalform">
                                <div class="fields">
                                    <div class="four wide required field">
                                        <label>Species</label>
                                        <div class="ui fluid search selection dropdown speciesname">
                                            <input id="speciesname" type="hidden"></input>
                                            <i class="dropdown icon"></i>
                                            <div class="default text">Enter Species...</div>
                                            <div class="menu"></div>
                                        </div>
                                    </div>
                                    <div class="six wide required field">
                                        <label>Identifier</label>
                                        <input id="animalID" type="text" placeholder="Identifier" />
                                    </div>
                                </div>
                                <div class="fields">
                                    <div class="four wide field">
                                        <label>Date born</label>
                                        <input id="borndate" type="text" placeholder="Born Date" />
                                    </div>
                                    <div class="four wide field">
                                        <label>Date slaughtered</label>
                                        <input id="slaughterdate" type="text" placeholder="Slaughter Date" />
                                    </div>
                                </div>
                                <div class="ui right floated teal submit addanimalbutton button">Add</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="eight wide column">
                    <div class="ui segment meatlist">
                        <a class="ui top attached label">Added meat</a>
                        <div class="content">
                            <table class="ui striped large table addedMeatTable" summary="Meats"></table>
                        </div>
                    </div>
                </div>
                <div class="eight wide column">
                    <div class="ui segment animallist">
                        <a class="ui top attached label">Animals</a>
                        <div class="content">
                            <table class="ui striped large table animalsTable" summary="Animals"></table>
                        </div>
                        <div id="animalsdimmer" class="ui inverted dimmer">
                            <div class="ui large text loader">Loading animals data</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="ui modal errors">
        <div class="content">
            <div class="image">
                <i class="red warning circle icon"></i>
            </div>
            <div class="description"><div class="ui header">Error</div><p class="message"></p></div>
        </div>
        <div class="actions">
            <div class="ui primary circular button">OK</div>
        </div>
    </div>


    <% include include/jquery-scripts.ejs %>
    <% include include/parse-scripts.ejs %>
    <% include include/semantic-scripts.ejs %>
    <% include include/moment-scripts.ejs %>

    <script>
        var priceTable;
        var SpeciesType  = Parse.Object.extend('Species');
        var CategoryType = Parse.Object.extend('Category');
        var AnimalType   = Parse.Object.extend('Animal');
        var MeatType     = Parse.Object.extend('Meat');
        var PricesType   = Parse.Object.extend('Prices');
        var NewMeatPseudoFreezer = new (Parse.Object.extend('Freezer'));
        NewMeatPseudoFreezer.id = 'YneyotzjIk';

        var priceQuery = new Parse.Query('Prices');

        var prices = priceQuery.collection();

        prices.fetch({
            success: function(prices)
            {
                var specieslist = {};
                var categorylist = {};
                var cutlist = {};

                prices.forEach(function(price)
                {
                    specieslist[price.get('species')] = true;

                    if(!categorylist[price.get('species')])
                    {
                        categorylist[price.get('species')] = {};
                    }
                    categorylist[price.get('species')][price.get('category')] = true;

                    if(!cutlist[price.get('species')])
                    {
                        cutlist[price.get('species')] = {};
                    }
                    cutlist[price.get('species')][price.get('cut')] = price.get('category');
                });

                for(var speciesname in specieslist)
                {
                    if(specieslist.hasOwnProperty(speciesname))
                    {
                        $('.ui.dropdown.speciesname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': speciesname }).text(speciesname));
                    }
                }
                $('.ui.dropdown.speciesname').dropdown({
                    onChange: function(val, text, choice)
                    {
                        // Limit cuts/cats dropdowns
                        $('.ui.dropdown.cutname .menu .item').remove();
                        $('.ui.dropdown.categoryname .menu .item').remove();
                        for(var cutname in cutlist[val])
                        {
                            if(cutlist[val].hasOwnProperty(cutname))
                            {
                                $('.ui.dropdown.cutname .menu').append($('<div>').addClass('item').attr({ 'data-value': cutname, 'cat-name': cutlist[val][cutname] }).text(cutname));
                            }
                        }

                        for(var categoryname in categorylist[val])
                        {
                            if(categorylist[val].hasOwnProperty(categoryname))
                            {
                                $('.ui.dropdown.categoryname .menu').append($('<div>').addClass('item').attr('data-value', categoryname).text(categoryname));
                            }
                        }

                        $('.ui.dropdown.cutname').dropdown();
                        $('.ui.dropdown.categoryname').dropdown();
                    },
                    onNoResults: function(val)
                    {
                        // Fully populate cuts/cats dropdown
                        $('.ui.dropdown.cutname .menu .item').remove();
                        $('.ui.dropdown.categoryname .menu .item').remove();
                        for(var speciesname in cutlist)
                        {
                            if(cutlist.hasOwnProperty(speciesname))
                            {
                                for(var cutname in cutlist[speciesname])
                                {
                                    if(cutlist[speciesname].hasOwnProperty(cutname) &&
                                     !$('.ui.dropdown.cutname .item[data-value="' + cutname + '"]').length)
                                    {
                                        $('.ui.dropdown.cutname .menu').append($('<div>').addClass('item').attr({ 'data-value': cutname, 'cat-name': cutlist[val][cutname] }).text(cutname));
                                    }
                                }

                                for(var categoryname in categorylist[speciesname])
                                {
                                    if(categorylist[speciesname].hasOwnProperty(categoryname) &&
                                     !$('.ui.dropdown.categoryname .item[data-value="' + categoryname + '"]').length)
                                    {
                                        $('.ui.dropdown.categoryname .menu').append($('<div>').addClass('item').attr('data-value', categoryname).text(categoryname));
                                    }
                                }
                            }
                        }

                        $('.ui.dropdown.cutname').dropdown();
                        $('.ui.dropdown.categoryname').dropdown();
                    }
                });

                for(var speciesname in cutlist)
                {
                    if(cutlist.hasOwnProperty(speciesname))
                    {
                        for(var cutname in cutlist[speciesname])
                        {
                            if(cutlist[speciesname].hasOwnProperty(cutname))
                            {
                                if(!$('.ui.dropdown.cutname .item[data-value="' + cutname + '"]').length)
                                {
                                    $('.ui.dropdown.cutname .menu').append($('<div>').addClass('item').attr({ 'data-value': cutname, 'cat-name': cutlist[speciesname][cutname] }).text(cutname));
                                }

                                if(!$('.ui.dropdown.categoryname .item[data-value="' + cutlist[speciesname][cutname] + '"]').length)
                                {
                                    $('.ui.dropdown.categoryname .menu').append($('<div>').addClass('item').attr('data-value', cutlist[speciesname][cutname]).text(cutlist[speciesname][cutname]));
                                }
                            }
                        }
                    }
                }
                $('.ui.dropdown.cutname').dropdown({
                    onChange: function(val, text, choice)
                    {
                        // Select the category that goes with this
                        $('.ui.dropdown.categoryname').dropdown('set selected', choice.attr('cat-name'));
                    }
                });

                for(var categoryname in categorylist)
                {
                    if(categorylist.hasOwnProperty(categoryname))
                    {
                        $('.ui.dropdown.categoryname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': categoryname }).text(categoryname));
                    }
                }
                $('.ui.dropdown.categoryname').dropdown();
            }
        });

        var headerFooterFormat = '<"ui two column grid"<"left aligned column"f><"right aligned column"<"addbutton">>>';
        $.fn.dataTable.moment('YYYY-MM-DD');

        $('.form.newanimalform').form({
            speciesname: {
                identifier: 'speciesname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a species' } ]
            },
            animalID: {
                identifier: 'animalID',
                rules: [ { type: 'empty', prompt: 'Please specify an ID for the animal' } ]
            },
            borndate: {
                identifier: 'borndate',
                rules: [ { type: 'datecheck', prompt: 'Born date must be blank or YYYY-MM-DD' } ]
            },
            slaughterdate: {
                identifier: 'slaughterdate',
                rules: [ { type: 'datecheck', prompt: 'Slaughter date must be blank or YYYY-MM-DD' } ]
            },
        }, {
            on: 'blur',
            inline: true,
            rules: {
                notentercheck: function()
                {
                    var name = $(this).getSemanticDropdownValue();
                    return !(/^Enter/).test(name);
                },
                datecheck: function ()
                {
                    // Ok to be blank
                    if($(this).val() == '') return true;

                    // Otherwise has to be valid date
                    var momentDate = moment($(this).val(), 'YYYY-MM-DD');
                    if(!momentDate.isValid()) return false;

                    if(momentDate.format('YYYY-MM-DD') == $(this).val()) return true;

                    return false;
                }
            }
        });

        var animalsTable = $('.animalsTable').DataTable({
            autoWidth: false,
            columnDefs: [
                { targets: 0, title: 'Species' },
                { targets: 1, title: 'Identifier' },
                { targets: 2, title: 'Born' },
                { targets: 3, title: 'Slaughtered' }
            ],
            order: [3, 'desc'],
            paging: false,
            dom: headerFooterFormat + 'rt',
        });

        var animalQuery = new Parse.Query('Animal');
        var animals = animalQuery.collection();

        animals.fetch(
        {
            success: function(animals)
            {
                animals.forEach(function(animal)
                {
                    var animalID = animal.get('identifier');

                    var newRow = animalsTable.row.add([
                        animal.get('species'),
                        animalID,
                        moment(animal.get('born')).format('YYYY-MM-DD'),
                        moment(animal.get('slaughtered')).format('YYYY-MM-DD')
                    ]);

                    $(newRow).data('animal',animal);

                    $('.ui.dropdown.animalID .menu').append(
                        $('<div>').addClass('item').attr({ 'data-value': animalID }).text(animalID).data('animal',animal)
                    );
                });

                $('.ui.dropdown.animalID').dropdown();
                animalsTable.draw();
            }
        });

        $('.addanimalbutton').click(function()
        {
            if(!$('.form.newanimalform').form('validate form')) { return false; }

            var speciesname = $('.form.newanimalform #speciesname').getSemanticDropdownValue();
            var animalID = $('.form.newanimalform #animalID').val();
            var borndate = $('.form.newanimalform #borndate').val();
            borndate = (borndate == '' ? null : moment(borndate,'YYYY-MM-DD').toDate());
            var slaughterdate = $('.form.newanimalform #slaughterdate').val();
            slaughterdate = (slaughterdate == '' ? null : moment(slaughterdate,'YYYY-MM-DD').toDate());

            var newspecies = !$('.form.newanimalform .speciesname .item[data-value="' + speciesname + '"]').length;
            if(newspecies)
            {
                var parseSpecies = new SpeciesType();
                parseSpecies.save({ species: speciesname, description: '' },
                    {
                        success: function(species)
                        {
                            $('.ui.dropdown.speciesname .menu')
                                .append($('<div>').addClass('item').attr({ 'data-value': speciesname }).text(speciesname));
                            $('.ui.dropdown.speciesname').dropdown();
                        }
                    });
            }

            var parseAnimal = new AnimalType();
            parseAnimal.save(
            {
                species: speciesname,
                identifier: animalID,
                born: borndate,
                slaughtered: slaughterdate
            },
            {
                success: function(animal)
                {
                    var animalID = animal.get('identifier');

                    var newRow = animalsTable.row.add([
                        animal.get('species'),
                        animalID,
                        moment(animal.get('born')).format('YYYY-MM-DD'),
                        moment(animal.get('slaughtered')).format('YYYY-MM-DD')
                    ]);

                    $(newRow).data('animal',animal);

                    $('.ui.dropdown.animalID .menu').append(
                        $('<div>').addClass('item').attr({ 'data-value': animalID }).text(animalID).data('animal',animal)
                    );

                    $('.ui.dropdown.animalID').dropdown();
                    animalsTable.draw();
                },
                error: function(animal, err)
                {
                    $('.modal.errors .message').text(err.message);
                    $('.modal.errors').modal('show');
                }
            });

            $('.form.newanimalform #animalID').val('');
            $('.form.newanimalform #borndate').val('');
            $('.form.newanimalform #slaughterdate').val('');
            $('.form.newanimalform #animalID').focus()
            $('.form.newanimalform .ui.dropdown').dropdown('save defaults');
            $('.form.newanimalform .ui.dropdown .menu .item.filtered').removeClass('filtered');
        });


        $('.form.newmeatform').form({
            speciesname: {
                identifier: 'speciesname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a species' } ]
            },
            categoryname: {
                identifier: 'categoryname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a category' } ]
            },
            cutname: {
                identifier: 'cutname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a cut' } ]
            },
            units: {
                identifier: 'units',
                rules: [ { type: 'empty', prompt: 'Please specify number of units' },
                         { type: 'unitscheck', prompt: 'Units must be decimal number less than 100 and greater than 0' }
                 ]
            },
            qty: {
                identifier: 'qty',
                rules: [ { type: 'intorempty', prompt: 'Quantity must be an integer' } ]
            }
        }, {
            on: 'blur',
            inline: true,
            rules: {
                notentercheck: function()
                {
                    var name = $(this).getSemanticDropdownValue();
                    return !(/^Enter/).test(name);
                },
                intorempty: function ()
                {
                    return $(this).val() == '' || !isNaN(parseInt($(this).val()));
                },
                unitscheck: function ()
                {
                    var numUnits = parseFloat($(this).val());
                    if(isNaN(numUnits) || numUnits < 0.0 || numUnits > 99.99) return false;
                    return true;
                }
            }
        });

        var addedMeatTable = $('.addedMeatTable').DataTable({
            autoWidth: false,
            columnDefs: [
                { targets: 0, title: 'Species'     , width: '4em' },
                { targets: 1, title: 'Category'    , width: '6em' },
                { targets: 2, title: 'Cut'         , width: '4em' },
                { targets: 3, title: 'Units/Weight', width: '4em' },
                { targets: 4, title: 'Animal'      , width: '4em' }
            ],
            order: [1, 'asc'],
            paging: false,
            dom: 'rt',
        });

        $('.addmeatbutton').click(function()
        {
            if(!$('.form.newmeatform').form('validate form')) { return false; }

            var speciesname  = $('.form.newmeatform #speciesname').getSemanticDropdownValue();
            var categoryname = $('.form.newmeatform #categoryname').getSemanticDropdownValue();
            var cutname      = $('.form.newmeatform #cutname').getSemanticDropdownValue();
            var unitsQty     = parseFloat($('.form.newmeatform #units').val());
            var animalID     = $('.form.newmeatform #animalID').getSemanticDropdownValue();
            var qty          = parseInt($('.form.newmeatform #qty').val());
            if(isNaN(qty)) { qty = 1; }

            var bitsPromises = [];

            var newspecies = !$('.form.newmeatform .speciesname .item[data-value="' + speciesname + '"]').length;
            if(newspecies)
            {
                var parseSpecies = new SpeciesType();
                parseSpecies.save({ species: speciesname, description: '' }).then(
                    function(species)
                    {
                        $('.ui.dropdown.speciesname .menu')
                        .append($('<div>').addClass('item').attr({ 'data-value': speciesname }).text(speciesname));
                        $('.ui.dropdown.speciesname').dropdown();
                        return Parse.Promise.as('species added');
                    });
            }

            (new Parse.Query('Category')).equalTo('species', speciesname).equalTo('category', categoryname).first().then(
            function(category)
            {
                if(category)
                {
                    return Parse.Promise.as(category);
                }
                else
                {
                    return (new CategoryType()).save({ species: speciesname, category: categoryname, description: '' });
                }
            }).then(
            function(category)
            {
                var newcategory = !$('.form.newmeatform .categoryname .item[data-value="' + categoryname + '"]').length;
                if(newcategory)
                {
                    $('.ui.dropdown.categoryname .menu')
                    .append($('<div>').addClass('item').attr({ 'data-value': categoryname }).text(categoryname));
                    $('.ui.dropdown.categoryname').dropdown();
                }
                return Parse.Promise.as('ok');
            });

            var newanimal = !$('.form.newmeatform .animalID .item[data-value="' + animalID + '"]').length;
            if(newanimal)
            {
                // Push a promise to create the animal
                bitsPromises.push((new AnimalType()).save({ species: speciesname, identifier: animalID, born: null, slaughtered: null}).then(
                function(animal)
                {
                    var newRow = animalsTable.row.add([
                        speciesname,
                        animalID,
                        moment(null).format('YYYY-MM-DD'),
                        moment(null).format('YYYY-MM-DD')
                    ]);

                    $(newRow).data('animal',animal);

                    $('.ui.dropdown.animalID .menu').append(
                        $('<div>').addClass('item').attr({ 'data-value': animalID }).text(animalID).data('animal',animal)
                    );

                    $('.ui.dropdown.animalID').dropdown();
                    animalsTable.draw();

                    return Parse.Promise.as(animal);
                }));
            }
            else
            {
                // Read the animal from the jQuery data we stuck on the menu item
                var existingAnimal = $('.form.newmeatform .animalID .item[data-value="' + animalID + '"]').data('animal');
                bitsPromises.push(Parse.Promise.as(existingAnimal));
            }

            bitsPromises.push((new Parse.Query('Prices'))
            .equalTo('species', speciesname)
            .equalTo('category', categoryname)
            .equalTo('cut', cutname)
            .first().then(
            function(price)
            {
                if(price)
                {
                    return Parse.Promise.as(price);
                }
                else
                {
                    return (new PricesType())
                    .save({ species: speciesname, category: categoryname, cut: cutname, price: 0.0, units: '?' }).then(
                    function(price)
                    {
                        var newcut = !$('.form.newmeatform .cutname .item[data-value="' + cutname + '"]').length;
                        if(newcut)
                        {
                            $('.ui.dropdown.cutname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': cutname , 'cat-name': categoryname }).text(cutname));
                            $('.ui.dropdown.cutname').dropdown();
                        }

                        return Parse.Promise.as(price);
                    });
                }
            }));


            // Now bitsPromises promises that both animal and price are set
            Parse.Promise.when(bitsPromises).then(
            function(animal, price)
            {
                while(qty--)
                {
                    (new MeatType()).save({
                        animal: animal,
                        cut: price,
                        freezer: NewMeatPseudoFreezer,
                        location: 'Not checked in yet',
                        units: unitsQty
                    }).then(
                    function(meat)
                    {
                        var newRow = addedMeatTable.row.add([
                            speciesname,
                            categoryname,
                            cutname,
                            unitsQty,
                            animalID
                        ]);

                        $(newRow).data('meat',meat);

                        addedMeatTable.draw();

                        return Parse.Promise.as('added meat');
                    },
                    function(err)
                    {
                        $('.modal.errors .message').text(err.message);
                        $('.modal.errors').modal('show');
                        return Parse.Promise.as('displayed error');
                    });
                }
            },
            function(err)
            {
                $('.modal.errors .message').text(err.message);
                $('.modal.errors').modal('show');
                return Parse.Promise.as('displayed error');
            });

            $('.form.newmeatform #units').val('');
            $('.form.newmeatform #qty').val('');
            $('.form.newmeatform #units').focus()
            $('.form.newmeatform .ui.dropdown').dropdown('save defaults');
            $('.form.newmeatform .ui.dropdown .menu .item.filtered').removeClass('filtered');
        });

    </script>

</body>
</html>
