<!DOCTYPE html>
<html>
<head>
    <% include include/jquery-header.ejs %>
    <% include include/parse-header.ejs %>
    <% include include/semantic-header.ejs %>

    <title>Prices</title>

</head>
<body>
    <div class="ui fixed large teal main menu"></div>

    <div class="ui basic segment main content">
        <div class="ui compact raised segment">
            <a class="ui top attached massive label">Prices</a>
            <div class="content">
                <table class="ui striped large table priceTable" summary="Prices of meats"></table>
            </div>
            <div id="pricedimmer" class="ui inverted dimmer">
                <div class="ui large text loader">Loading price data</div>
            </div>
        </div>
    </div>

    <div class="ui modal errors">
        <div class="content">
            <div class="image">
                <i class="red warning circle icon"></i>
            </div>
            <div class="description"><div class="ui header">Error</div><p class="message"></p></div>
        </div>
        <div class="actions">
            <div class="ui primary circular button">OK</div>
        </div>
    </div>

    <div class="ui modal newprice">
        <div class="content">
            <div class="image">
                <i class="money icon"></i>
            </div>
            <div class="description">
                <div class="ui form newitemprice"><form>
                    <h4 class="ui dividing header">Enter new item details</h4>
                    <div class="field">
                        <div class="three fields">
                            <div class="required field">
                                <label>Species</label>
                                <div class="ui fluid search selection dropdown speciesname">
                                    <input id="speciesname" type="hidden"></input>
                                    <i class="dropdown icon"></i>
                                    <div class="default text">Enter Species...</div>
                                    <div class="menu"></div>
                                </div>
                            </div>
                            <div class="required field">
                                <label>Category</label>
                                <div class="ui fluid search selection dropdown categoryname">
                                    <input id="categoryname" type="hidden"></input>
                                    <i class="dropdown icon"></i>
                                    <div class="default text">Enter Category...</div>
                                    <div class="menu"></div>
                                </div>
                            </div>
                            <div class="required field">
                                <label>Cut</label>
                                <div class="ui icon input">
                                    <i class="cut icon"></i>
                                    <input type="text" id="cutname" placeholder="Cut">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="field">
                        <div class="two fields">
                            <div class="required field">
                                <label>Price per unit</label>
                                <div class="ui icon input">
                                    <i class="money icon"></i>
                                    <input type="text" id="priceperunit" placeholder="0.00">
                                </div>
                            </div>
                            <div class="required field">
                                <label>Units</label>
                                <div class="ui fluid search selection dropdown unitname">
                                    <input id="unitname" type="hidden"></input>
                                    <i class="dropdown icon"></i>
                                    <div class="default text">Enter Units...</div>
                                    <div class="menu"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form></div>
            </div>
        </div>
        <div class="actions">
            <div class="ui buttons">
                <div class="ui negative circular button">
                    Cancel
                </div>
                <div class="or"></div>
                <div class="ui positive circular button">
                    Add
                </div>
            </div>
        </div>
    </div>

    <% include include/jquery-scripts.ejs %>
    <% include include/parse-scripts.ejs %>
    <% include include/semantic-scripts.ejs %>

    <script>
    var priceTable;
    var SpeciesType  = Parse.Object.extend('Species');
    var CategoryType = Parse.Object.extend('Category');
    var PricesType   = Parse.Object.extend('Prices');

    function editPrice(newPrice, settings)
    {
        var theCell = this;
        var priceObj = $( this.parentNode ).data('parsePrice');
        var oldPrice = priceObj.get('price');
        var priceNum = parseFloat(newPrice);
        if(isNaN(priceNum))
        {
            priceNum = priceObj.get('price');
        }
        else
        {
            $('.primary.button').addClass('loading');
            priceObj.save( { price: priceNum },
            {
                success: function(price)
                {
                    $('.primary.button').removeClass('loading');
                },
                error: function(price, err)
                {
                    $('.modal.errors .message').text(err.message);
                    $('.modal.errors').modal('show');

                    priceTable.cell(theCell).data(oldPrice.toFixed(2));
                    $('.primary.button').removeClass('loading');
                }
            } );
        }

        return '$ ' + priceNum.toFixed(2);
    }

    function hideAdminStuff()
    {
        $('.addbutton').hide();

         // Remove the jEditable handlers to the table
        priceTable.column(3).nodes().to$().editable('disable');
    }

    function showAdminStuff()
    {
        $('.addbutton').show();

        priceTable.column(3).nodes().to$().editable('enable');
    }

    function checkAdmin()
    {
        if(!(Parse.User.current() && Parse.User.current().authenticated()))
        {
            hideAdminStuff();
            return;
        }

        var query = (new Parse.Query(Parse.Role))
            .equalTo("name", "admin")
            .equalTo("users", Parse.User.current())
            .first()
            .then(function(adminRole)
            {
                if (adminRole)
                {
                    showAdminStuff();
                } else {
                    hideAdminStuff();
                }
            });
    }
    postLoginChange = checkAdmin;

    $(function ()
    {
        $('.form.newitemprice').form({
            speciesname: {
                identifier: 'speciesname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a species' } ]
            },
            categoryname: {
                identifier: 'categoryname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a category' } ]
            },
            cutname: {
                identifier: 'cutname',
                rules: [ { type: 'empty', prompt: 'Please specify a cut name' } ]
            },
            priceperunit: {
                identifier: 'priceperunit',
                rules: [ { type: 'empty', prompt: 'Please specify a price' },
                         { type: 'pricecheck', prompt: 'Price must be a reasonable number (1.00 - 99.99)' }
                       ]
            },
            unitname: {
                identifier: 'unitname',
                rules: [ { type: 'notentercheck', prompt: 'Please specify a unit' } ]
            }
        }, {
            on: 'blur',
            inline: true,
            rules: {
                pricecheck: function ()
                {
                    var numPrice = parseFloat($(this).val());
                    if(isNaN(numPrice) || numPrice < 1.0 || numPrice > 99.99) return false;
                    return true;
                },
                notentercheck: function()
                {
                    var name = $(this).getSemanticDropdownValue();
                    return !(/^Enter/).test(name);
                }
            }
        });

        $('#pricedimmer').dimmer('show');

        var headerFooterFormat = '<"ui two column grid"<"left aligned column"f><"right aligned column"<"addbutton">>>';
        // Init DataTables
        priceTable = $('.priceTable').DataTable({
            autoWidth: false,
            columnDefs: [
                { targets: 0, title: 'Species', orderData: [ 0, 1, 2 ]  },
                { targets: 1, title: 'Category', orderData: [ 0, 1, 2 ] },
                { targets: 2, title: 'Cut', orderData: [ 0, 1, 2 ] },
                { targets: 3, title: 'Price', type: 'num-fmt' },
                { targets: 4, title: 'Unit', orderable: false }
            ],
            order: [[0,'asc'], [1,'asc'], [2,'asc']],
            paging: false,
            dom: headerFooterFormat + 'rt' + headerFooterFormat,
        });

        $('.addbutton')
            .addClass('ui primary labeled compact circular icon button')
            .text('Add')
            .prepend($('<i>').addClass('plus icon'))
            .click(function()
            {
                $('.modal.newprice')
                    .modal({
                        closable: false,
                        onDeny: function()
                        {
                            $('form').trigger('reset');
                            $('.form.newitemprice .ui.dropdown').dropdown('restore defaults');
                            $('.form.newitemprice .ui.dropdown .menu .item.filtered').removeClass('filtered');
                        },
                        onApprove: function()
                        {
                            if($('.form.newitemprice').form('validate form'))
                            {
                                var speciesname = $('#speciesname').getSemanticDropdownValue();
                                var categoryname = $('#categoryname').getSemanticDropdownValue();
                                var unitname = $('#unitname').getSemanticDropdownValue();

                                var newspecies = !$('.speciesname .item[data-value="' + speciesname + '"]').length;
                                var newcategory = !$('.categoryname .item[data-value="' + categoryname + '"]').length;
                                var newunit = !$('.unitname .item[data-value="' + unitname + '"]').length;

                                if(newspecies)
                                {
                                    var parseSpecies = new SpeciesType();
                                    parseSpecies.save({ species: speciesname, description: '' },
                                        {
                                            success: function(species)
                                            {
                                                $('.ui.dropdown.speciesname .menu')
                                                    .append($('<div>').addClass('item').attr({ 'data-value': speciesname }).text(speciesname));
                                                $('.ui.dropdown.speciesname').dropdown();
                                            }
                                        });
                                }

                                (new Parse.Query('Category')).equalTo('species', speciesname).equalTo('category', categoryname).first().then(
                                function(category)
                                {
                                    if(category)
                                    {
                                        return Parse.Promise.as(category);
                                    }
                                    else
                                    {
                                        return (new CategoryType()).save({ species: speciesname, category: categoryname, description: '' });
                                    }
                                }).then(
                                function(category)
                                {
                                    if(newcategory)
                                    {
                                        $('.ui.dropdown.categoryname .menu')
                                        .append($('<div>').addClass('item').attr({ 'data-value': categoryname }).text(categoryname));
                                        $('.ui.dropdown.categoryname').dropdown();
                                    }
                                    return Parse.Promise.as('ok');
                                });

                                if(newunit)
                                {
                                    $('.ui.dropdown.unitname .menu')
                                        .append($('<div>').addClass('item').attr({ 'data-value': unitname }).text(unitname));
                                    $('.ui.dropdown.unitname').dropdown();
                                }

                                $('#pricedimmer').dimmer('show');

                                var parsePrice = new PricesType();
                                parsePrice.save(
                                {
                                    species: speciesname,
                                    category: categoryname,
                                    cut: $('input#cutname').val(),
                                    price: parseFloat($('input#priceperunit').val()),
                                    units: unitname
                                },
                                {
                                    success: function(price)
                                    {
                                        var newRow = priceTable.row.add([
                                                price.get('species'),
                                                price.get('category'),
                                                price.get('cut'),
                                                '$ ' + price.get('price').toFixed(2),
                                                '/' + price.get('units')
                                            ]);

                                        $(newRow.node()).data('parsePrice', price);

                                         // Apply the jEditable handlers to the table
                                        newRow.column(3).nodes().to$().editable(editPrice,
                                        {
                                            // Remove '$ and any ,'
                                            data: function(value, settings) { return value.replace(/[$, ]/g, ''); }
                                        });

                                        // Make prices right-align
                                        priceTable.column(3).nodes().to$().addClass('right aligned');

                                        priceTable.draw();
                                        $('#pricedimmer').dimmer('hide');
                                    },
                                    error: function(price, err)
                                    {
                                        $('.modal.errors .message').text(err.message);
                                        $('.modal.errors').modal('show');
                                        $('#pricedimmer').dimmer('hide');
                                    }
                                });

                                $('form').trigger('reset');
                                $('.form.newitemprice .ui.dropdown').dropdown('restore defaults');
                                $('.form.newitemprice .ui.dropdown .menu .item.filtered').removeClass('filtered');
                            }
                            else
                            {
                                return false;
                            }
                        }
                    })
                    .modal('show');
            });

        var priceQuery = new Parse.Query('Prices');

        var prices = priceQuery.collection();

        prices.fetch({
            success: function(prices)
            {
                var specieslist = {};
                var categorylist = {};
                var unitlist = {};

                prices.forEach(function(price)
                {
                    specieslist[price.get('species')] = true;
                    categorylist[price.get('category')] = true;
                    unitlist[price.get('units')] = true;

                    var newRow = priceTable.row.add([
                            price.get('species'),
                            price.get('category'),
                            price.get('cut'),
                            '$ ' + price.get('price').toFixed(2),
                            '/' + price.get('units')
                        ]).node();

                    $(newRow).data('parsePrice', price);
                });

                for(var speciesname in specieslist)
                {
                    if(specieslist.hasOwnProperty(speciesname))
                    {
                        $('.ui.dropdown.speciesname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': speciesname }).text(speciesname));
                    }
                }
                $('.ui.dropdown.speciesname').dropdown('save defaults');

                for(var categoryname in categorylist)
                {
                    if(categorylist.hasOwnProperty(categoryname))
                    {
                        $('.ui.dropdown.categoryname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': categoryname }).text(categoryname));
                    }
                }
                $('.ui.dropdown.categoryname').dropdown('save defaults');

                for(var unitname in unitlist)
                {
                    if(unitlist.hasOwnProperty(unitname))
                    {
                        $('.ui.dropdown.unitname .menu')
                            .append($('<div>').addClass('item').attr({ 'data-value': unitname }).text(unitname));
                    }
                }
                $('.ui.dropdown.unitname').dropdown('save defaults');

                 // Apply the jEditable handlers to the table
                priceTable.column(3).nodes().to$().editable(editPrice,
                {
                    // Remove '$ and any ,'
                    data: function(value, settings) { return value.replace(/[$, ]/g, ''); }
                });

                // Make prices right-align
                priceTable.column(3).nodes().to$().addClass('right aligned');

                priceTable.draw();

                checkAdmin();

                $('#pricedimmer').dimmer('hide');
            },
            error: function(err)
            {
                $('.modal.errors .message').text(err.message);
                $('.modal.errors').modal('show');
                $('#pricedimmer').dimmer('hide');
            }
        });
    });
    </script>

</body>
</html>
