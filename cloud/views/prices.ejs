<!DOCTYPE html>
<html>
<head>
    <% include include/jquery-header.ejs %>
    <% include include/parse-header.ejs %>
    <% include include/semantic-header.ejs %>
    <% include include/cienegacss.ejs %>

    <title>Prices</title>

</head>
<body>
    <div class="ui fixed large teal main menu"></div>

    <div class="main content">
        <div class="ui compact raised segment">
            <a class="ui top attached massive label">Prices</a>
            <div class="content">
                <table class="ui striped teal large table priceTable" summary="Prices of meats"></table>
            </div>
        </div>
    </div>

    <div class="ui modal errors">
        <div class="content">
            <div class="image">
                <i class="red warning circle icon"></i>
            </div>
            <div class="description"><div class="ui header">Error</div><p class="message"></p></div>
        </div>
        <div class="actions">
            <div class="ui primary circular button">OK</div>
        </div>
    </div>

    <% include include/jquery-scripts.ejs %>
    <% include include/parse-scripts.ejs %>
    <% include include/semantic-scripts.ejs %>

    <script>
    var priceTable;

    function editPrice(newPrice, settings)
    {
        var theCell = this;
        var priceObj = $( this.parentNode ).data('parsePrice');
        var oldPrice = priceObj.get('price');
        var priceNum = parseFloat(newPrice);
        if(isNaN(priceNum))
        {
            priceNum = priceObj.get('price');
        }
        else
        {
            $('.primary.button').addClass('loading');
            priceObj.save( { price: priceNum },
            {
                success: function(price)
                {
                    $('.primary.button').removeClass('loading');
                },
                error: function(price, err)
                {
                    $('.modal.errors .message').text(err.message);
                    $('.modal.errors').modal('show');

                    priceTable.cell(theCell).data(oldPrice.toFixed(2));
                    $('.primary.button').removeClass('loading');
                }
            } );
        }

        return '$ ' + priceNum.toFixed(2);
    }

    $(function ()
    {
        var headerFooterFormat = '<"ui two column centered grid"<"left aligned column"f><"right aligned column"<"addbutton">>>';
        // Init DataTables
        priceTable = $('.priceTable').DataTable({
            autoWidth: false,
            columnDefs: [
                { targets: 0, width: '5em', title: 'Species', orderData: [ 0, 1, 2 ]  },
                { targets: 1, width: '6em', title: 'Category', orderData: [ 0, 1, 2 ] },
                { targets: 2, width: '10em', title: 'Cut', orderData: [ 0, 1, 2 ] },
                { targets: 3, width: '4em', title: 'Price', type: 'num' },
                { targets: 4, width: '2em', title: 'Unit' }
            ],
            order: [[0,'asc'], [1,'asc'], [2,'asc']],
            paging: false,
            dom: headerFooterFormat + 'rt' + headerFooterFormat
        });

        $('.addbutton')
            .addClass('ui primary labeled compact circular icon button')
            .text('Add')
            .prepend($('<i>').addClass('plus icon'))
            .click(function()
            {

            });

        var priceQuery = new Parse.Query('Prices');

        var prices = priceQuery.collection();

        prices.fetch({
            success: function(prices)
            {
                prices.forEach(function(price)
                {
                    var newRow = priceTable.row.add([
                            price.get('species'),
                            price.get('category'),
                            price.get('cut'),
                            '$ ' + price.get('price').toFixed(2),
                            '/' + price.get('units')
                        ]).node();

                    $(newRow).data('parsePrice', price);
               });

                 // Apply the jEditable handlers to the table
                priceTable.column(3).nodes().to$().editable(editPrice,
                {
                    // Remove '$ and any ,'
                    data: function(value, settings) { return value.replace(/[$, ]/g, ''); }
                });

                // Make prices right-align
                priceTable.column(3).nodes().to$().addClass('right aligned');

                priceTable.draw();
            },
            error: function(err)
            {
                $('.modal.errors .message').text(err.message);
                $('.modal.errors').modal('show');
            }
        });
    });
    </script>

</body>
</html>
